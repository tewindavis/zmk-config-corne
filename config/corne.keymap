/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <6 18 30 39 40 7 8 9 10 11 19 20 21 22 23 31 32 33 34 35 41>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        Copy {
            bindings = <&kp LC(INSERT)>;
            key-positions = <3 2 4>;
            layers = <0>;
        };

        Paste {
            bindings = <&kp LS(INS)>;
            key-positions = <14 15 16>;
            layers = <0>;
        };

        Cut {
            bindings = <&kp LS(DELETE)>;
            key-positions = <26 28 27>;
            layers = <0>;
        };

        prog-less {
            bindings = <&kp LT>;
            key-positions = <32 19>;
            layers = <0>;
        };

        prog-equals {
            bindings = <&kp EQUAL>;
            key-positions = <19 21 20>;
            layers = <0>;
        };

        prog-colon {
            bindings = <&kp COLON>;
            key-positions = <7 8 9>;
            layers = <0>;
        };

        enie {
            bindings = <&kp RA(N)>;
            key-positions = <36 19>;
            layers = <0>;
        };

        enie-mac {
            bindings = <&enie_mac>;
            key-positions = <36 19 16>;
            layers = <0>;
        };

        huh {
            bindings = <&kp QUESTION>;
            key-positions = <14 15 4>;
        };

        chin {
            bindings = <&kp EXCLAMATION>;
            key-positions = <26 4 27>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <19 18>;
        };

        under {
            bindings = <&kp UNDER>;
            key-positions = <31 30>;
        };

        accent {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <16 20>;
        };

        caps {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };
    };

    macros {
        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DEL)>;
            label = "CUT";
        };

        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(INS)>;
            label = "COPY";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(INS)>;
            label = "PASTE";
        };

        enie_mac: enie_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(N) &kp N &kp N>;
            label = "ENIE_MAC";
        };

        left_word: left_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT)>;
            label = "LEFT_WORD";
        };

        right_word: right_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT)>;
            label = "RIGHT_WORD";
        };

        fast_del: fast_del {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(BACKSPACE)>;
            label = "FAST_DEL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            display-name = "ALPHA";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q             &kp W        &kp F                &kp P              &kp B        &kp J      &kp L               &kp U                 &kp Y             &kp SEMICOLON     &kp ESCAPE
&kp LCTRL  &hml LEFT_META A  &hml LALT R  &hml LEFT_CONTROL S  &hml LEFT_SHIFT T  &kp G        &kp M      &hmr RIGHT_SHIFT N  &hmr RIGHT_CONTROL E  &hmr RIGHT_ALT I  &hmr RIGHT_GUI O  &kp SQT
&kp LSHFT  &kp Z             &kp X        &kp C                &kp D              &kp V        &kp K      &kp H               &kp PERIOD            &kp COMMA         &kp SLASH        &key_repeat
                                          &lt 3 LEFT_ALT       &mo 1              &kp SPACE    &kp ENTER  &lt 4 BACKSPACE     &lt 2 LEFT_GUI
            >;
        };

        num-nav {
            display-name = "NUM-NAV";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &sk LEFT_ALT    &kp N7        &kp N8        &kp N9        &trans       &trans   &left_word      &kp UP    &right_word  &kp PAGE_UP    &kp DELETE
&kp CAPS    &sk LEFT_SHIFT  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N0       &trans   &kp LEFT_ARROW  &kp DOWN  &kp RIGHT    &kp INS        &trans
&trans      &sk LCTRL       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans       &trans   &kp HOME        &cut      &kp END      &kp PAGE_DOWN  &trans
                                          &trans        &trans        &kp SPACE    &kp RET  &fast_del       &trans
            >;
        };

        media {
            display-name = "MEDIA";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &kp C_PREV         &kp C_MUTE        &kp C_NEXT       &trans       &trans  &trans          &trans            &trans        &trans        &trans
&trans  &trans  &kp C_VOLUME_DOWN  &kp C_PLAY_PAUSE  &kp C_VOLUME_UP  &trans       &trans  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &trans
&trans  &trans  &trans             &trans            &trans           &trans       &trans  &trans          &trans            &trans        &trans        &trans
                                   &trans            &trans           &kp SPACE    &trans  &trans          &trans
            >;
        };

        fun {
            display-name = "FUNCTIONS";
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp N9  &trans    &trans      &kp N7        &kp N8        &kp N9        &trans        &ext_power EP_ON
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans    &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans    &trans      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans        &bootloader
                         &trans  &trans  &trans    &trans      &trans        &trans
            >;

            label = "FUNCTION";
        };

        sym {
            display-name = "SYMBOLS";
            bindings = <
&trans  &kp TILDE  &kp DOLLAR     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PERCENT    &trans    &kp DOUBLE_QUOTES  &kp LESS_THAN  &kp GREATER_THAN  &kp GRAVE        &trans
&trans  &kp UNDER  &kp COLON      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE       &kp HASH  &kp EQUAL          &kp MINUS      &kp PLUS          &kp EXCLAMATION  &trans
&trans  &trans     &kp AMPERSAND  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AT_SIGN    &kp AMPS  &kp SLASH          &kp ASTERISK   &kp BACKSLASH     &kp CARET        &trans
                                  &trans                &trans                 &trans         &trans    &trans             &trans
            >;
        };

        wm {
            bindings = <
&trans  &trans  &trans            &trans            &kp LS(LA(Q))     &trans           &trans             &sk LS(LEFT_ALT)    &trans         &trans            &trans  &trans
&trans  &trans  &kp LA(NUMBER_1)  &kp LA(NUMBER_2)  &kp LA(NUMBER_3)  &kp LA(SPACE)    &kp LA(LS(SPACE))  &kp LA(NUMBER_4)    &kp LA(N5)     &kp LA(NUMBER_6)  &trans  &trans
&trans  &trans  &kp LA(N7)        &kp LA(N9)        &kp LA(N0)        &trans           &trans             &kp LA(LEFT_ARROW)  &kp LA(RIGHT)  &trans            &trans  &trans
                                  &trans            &trans            &trans           &trans             &trans              &trans
            >;

            label = "WM";
        };

        android {
            bindings = <
&trans  &trans  &trans             &kp LA(LS(LEFT_ARROW))  &kp LA(LS(RIGHT))  &trans                          &trans           &trans        &kp LC(LS(LA(ENTER)))          &trans  &trans  &trans
&trans  &trans  &kp LC(SEMICOLON)  &kp LC(LA(B))           &kp LA(ENTER)      &kp LC(LS(NON_US_BACKSLASH))    &kp LS(LC(SQT))  &kp LA(LEFT)  &kp LA(RIGHT)                  &trans  &trans  &trans
&trans  &trans  &trans             &kp LC(LS(GRAVE))       &kp LC(LS(F1))     &kp LA(LS(F10))                 &kp LS(LA(F9))   &trans        &kp LS(LA(LC(RIGHT_BRACKET)))  &trans  &trans  &trans
                                   &trans                  &trans             &trans                          &trans           &trans        &trans
            >;

            label = "DROID";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        glaze-wm {
            if-layers = <2 3>;
            then-layer = <5>;
        };

        android-shortcuts {
            if-layers = <1 4>;
            then-layer = <6>;
        };
    };
};
